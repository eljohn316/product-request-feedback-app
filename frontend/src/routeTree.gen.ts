/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RoadmapIndexImport } from './routes/roadmap/index'
import { Route as NewIndexImport } from './routes/new/index'
import { Route as homeLayoutImport } from './routes/(home)/_layout'
import { Route as feedbackIdImport } from './routes/(feedback)/$id'
import { Route as homeLayoutIndexImport } from './routes/(home)/_layout.index'
import { Route as editFeedbackIdEditImport } from './routes/(edit-feedback)/$id.edit'

// Create Virtual Routes

const homeImport = createFileRoute('/(home)')()

// Create/Update Routes

const homeRoute = homeImport.update({
  id: '/(home)',
  getParentRoute: () => rootRoute,
} as any)

const RoadmapIndexRoute = RoadmapIndexImport.update({
  id: '/roadmap/',
  path: '/roadmap/',
  getParentRoute: () => rootRoute,
} as any)

const NewIndexRoute = NewIndexImport.update({
  id: '/new/',
  path: '/new/',
  getParentRoute: () => rootRoute,
} as any)

const homeLayoutRoute = homeLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => homeRoute,
} as any)

const feedbackIdRoute = feedbackIdImport.update({
  id: '/(feedback)/$id',
  path: '/$id',
  getParentRoute: () => rootRoute,
} as any)

const homeLayoutIndexRoute = homeLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => homeLayoutRoute,
} as any)

const editFeedbackIdEditRoute = editFeedbackIdEditImport.update({
  id: '/(edit-feedback)/$id/edit',
  path: '/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(feedback)/$id': {
      id: '/(feedback)/$id'
      path: '/$id'
      fullPath: '/$id'
      preLoaderRoute: typeof feedbackIdImport
      parentRoute: typeof rootRoute
    }
    '/(home)': {
      id: '/(home)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeImport
      parentRoute: typeof rootRoute
    }
    '/(home)/_layout': {
      id: '/(home)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeLayoutImport
      parentRoute: typeof homeRoute
    }
    '/new/': {
      id: '/new/'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewIndexImport
      parentRoute: typeof rootRoute
    }
    '/roadmap/': {
      id: '/roadmap/'
      path: '/roadmap'
      fullPath: '/roadmap'
      preLoaderRoute: typeof RoadmapIndexImport
      parentRoute: typeof rootRoute
    }
    '/(edit-feedback)/$id/edit': {
      id: '/(edit-feedback)/$id/edit'
      path: '/$id/edit'
      fullPath: '/$id/edit'
      preLoaderRoute: typeof editFeedbackIdEditImport
      parentRoute: typeof rootRoute
    }
    '/(home)/_layout/': {
      id: '/(home)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeLayoutIndexImport
      parentRoute: typeof homeLayoutImport
    }
  }
}

// Create and export the route tree

interface homeLayoutRouteChildren {
  homeLayoutIndexRoute: typeof homeLayoutIndexRoute
}

const homeLayoutRouteChildren: homeLayoutRouteChildren = {
  homeLayoutIndexRoute: homeLayoutIndexRoute,
}

const homeLayoutRouteWithChildren = homeLayoutRoute._addFileChildren(
  homeLayoutRouteChildren,
)

interface homeRouteChildren {
  homeLayoutRoute: typeof homeLayoutRouteWithChildren
}

const homeRouteChildren: homeRouteChildren = {
  homeLayoutRoute: homeLayoutRouteWithChildren,
}

const homeRouteWithChildren = homeRoute._addFileChildren(homeRouteChildren)

export interface FileRoutesByFullPath {
  '/$id': typeof feedbackIdRoute
  '/': typeof homeLayoutIndexRoute
  '/new': typeof NewIndexRoute
  '/roadmap': typeof RoadmapIndexRoute
  '/$id/edit': typeof editFeedbackIdEditRoute
}

export interface FileRoutesByTo {
  '/$id': typeof feedbackIdRoute
  '/new': typeof NewIndexRoute
  '/roadmap': typeof RoadmapIndexRoute
  '/$id/edit': typeof editFeedbackIdEditRoute
  '/': typeof homeLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(feedback)/$id': typeof feedbackIdRoute
  '/(home)': typeof homeRouteWithChildren
  '/(home)/_layout': typeof homeLayoutRouteWithChildren
  '/new/': typeof NewIndexRoute
  '/roadmap/': typeof RoadmapIndexRoute
  '/(edit-feedback)/$id/edit': typeof editFeedbackIdEditRoute
  '/(home)/_layout/': typeof homeLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$id' | '/' | '/new' | '/roadmap' | '/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/$id' | '/new' | '/roadmap' | '/$id/edit' | '/'
  id:
    | '__root__'
    | '/(feedback)/$id'
    | '/(home)'
    | '/(home)/_layout'
    | '/new/'
    | '/roadmap/'
    | '/(edit-feedback)/$id/edit'
    | '/(home)/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  feedbackIdRoute: typeof feedbackIdRoute
  homeRoute: typeof homeRouteWithChildren
  NewIndexRoute: typeof NewIndexRoute
  RoadmapIndexRoute: typeof RoadmapIndexRoute
  editFeedbackIdEditRoute: typeof editFeedbackIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  feedbackIdRoute: feedbackIdRoute,
  homeRoute: homeRouteWithChildren,
  NewIndexRoute: NewIndexRoute,
  RoadmapIndexRoute: RoadmapIndexRoute,
  editFeedbackIdEditRoute: editFeedbackIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(feedback)/$id",
        "/(home)",
        "/new/",
        "/roadmap/",
        "/(edit-feedback)/$id/edit"
      ]
    },
    "/(feedback)/$id": {
      "filePath": "(feedback)/$id.tsx"
    },
    "/(home)": {
      "filePath": "(home)",
      "children": [
        "/(home)/_layout"
      ]
    },
    "/(home)/_layout": {
      "filePath": "(home)/_layout.tsx",
      "parent": "/(home)",
      "children": [
        "/(home)/_layout/"
      ]
    },
    "/new/": {
      "filePath": "new/index.tsx"
    },
    "/roadmap/": {
      "filePath": "roadmap/index.tsx"
    },
    "/(edit-feedback)/$id/edit": {
      "filePath": "(edit-feedback)/$id.edit.tsx"
    },
    "/(home)/_layout/": {
      "filePath": "(home)/_layout.index.tsx",
      "parent": "/(home)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
