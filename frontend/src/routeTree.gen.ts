/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RoadmapIndexImport } from './routes/roadmap/index'
import { Route as NewIndexImport } from './routes/new/index'
import { Route as productRequestLayoutImport } from './routes/(product-request)/_layout'
import { Route as homeLayoutImport } from './routes/(home)/_layout'
import { Route as editProductRequestLayoutImport } from './routes/(edit-product-request)/_layout'
import { Route as homeLayoutIndexImport } from './routes/(home)/_layout.index'
import { Route as productRequestLayoutIdImport } from './routes/(product-request)/_layout.$id'
import { Route as editProductRequestLayoutIdEditImport } from './routes/(edit-product-request)/_layout.$id.edit'

// Create Virtual Routes

const productRequestImport = createFileRoute('/(product-request)')()
const homeImport = createFileRoute('/(home)')()
const editProductRequestImport = createFileRoute('/(edit-product-request)')()

// Create/Update Routes

const productRequestRoute = productRequestImport.update({
  id: '/(product-request)',
  getParentRoute: () => rootRoute,
} as any)

const homeRoute = homeImport.update({
  id: '/(home)',
  getParentRoute: () => rootRoute,
} as any)

const editProductRequestRoute = editProductRequestImport.update({
  id: '/(edit-product-request)',
  getParentRoute: () => rootRoute,
} as any)

const RoadmapIndexRoute = RoadmapIndexImport.update({
  id: '/roadmap/',
  path: '/roadmap/',
  getParentRoute: () => rootRoute,
} as any)

const NewIndexRoute = NewIndexImport.update({
  id: '/new/',
  path: '/new/',
  getParentRoute: () => rootRoute,
} as any)

const productRequestLayoutRoute = productRequestLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => productRequestRoute,
} as any)

const homeLayoutRoute = homeLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => homeRoute,
} as any)

const editProductRequestLayoutRoute = editProductRequestLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => editProductRequestRoute,
} as any)

const homeLayoutIndexRoute = homeLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => homeLayoutRoute,
} as any)

const productRequestLayoutIdRoute = productRequestLayoutIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => productRequestLayoutRoute,
} as any)

const editProductRequestLayoutIdEditRoute =
  editProductRequestLayoutIdEditImport.update({
    id: '/$id/edit',
    path: '/$id/edit',
    getParentRoute: () => editProductRequestLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(edit-product-request)': {
      id: '/(edit-product-request)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof editProductRequestImport
      parentRoute: typeof rootRoute
    }
    '/(edit-product-request)/_layout': {
      id: '/(edit-product-request)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof editProductRequestLayoutImport
      parentRoute: typeof editProductRequestRoute
    }
    '/(home)': {
      id: '/(home)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeImport
      parentRoute: typeof rootRoute
    }
    '/(home)/_layout': {
      id: '/(home)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeLayoutImport
      parentRoute: typeof homeRoute
    }
    '/(product-request)': {
      id: '/(product-request)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof productRequestImport
      parentRoute: typeof rootRoute
    }
    '/(product-request)/_layout': {
      id: '/(product-request)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof productRequestLayoutImport
      parentRoute: typeof productRequestRoute
    }
    '/new/': {
      id: '/new/'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewIndexImport
      parentRoute: typeof rootRoute
    }
    '/roadmap/': {
      id: '/roadmap/'
      path: '/roadmap'
      fullPath: '/roadmap'
      preLoaderRoute: typeof RoadmapIndexImport
      parentRoute: typeof rootRoute
    }
    '/(product-request)/_layout/$id': {
      id: '/(product-request)/_layout/$id'
      path: '/$id'
      fullPath: '/$id'
      preLoaderRoute: typeof productRequestLayoutIdImport
      parentRoute: typeof productRequestLayoutImport
    }
    '/(home)/_layout/': {
      id: '/(home)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeLayoutIndexImport
      parentRoute: typeof homeLayoutImport
    }
    '/(edit-product-request)/_layout/$id/edit': {
      id: '/(edit-product-request)/_layout/$id/edit'
      path: '/$id/edit'
      fullPath: '/$id/edit'
      preLoaderRoute: typeof editProductRequestLayoutIdEditImport
      parentRoute: typeof editProductRequestLayoutImport
    }
  }
}

// Create and export the route tree

interface editProductRequestLayoutRouteChildren {
  editProductRequestLayoutIdEditRoute: typeof editProductRequestLayoutIdEditRoute
}

const editProductRequestLayoutRouteChildren: editProductRequestLayoutRouteChildren =
  {
    editProductRequestLayoutIdEditRoute: editProductRequestLayoutIdEditRoute,
  }

const editProductRequestLayoutRouteWithChildren =
  editProductRequestLayoutRoute._addFileChildren(
    editProductRequestLayoutRouteChildren,
  )

interface editProductRequestRouteChildren {
  editProductRequestLayoutRoute: typeof editProductRequestLayoutRouteWithChildren
}

const editProductRequestRouteChildren: editProductRequestRouteChildren = {
  editProductRequestLayoutRoute: editProductRequestLayoutRouteWithChildren,
}

const editProductRequestRouteWithChildren =
  editProductRequestRoute._addFileChildren(editProductRequestRouteChildren)

interface homeLayoutRouteChildren {
  homeLayoutIndexRoute: typeof homeLayoutIndexRoute
}

const homeLayoutRouteChildren: homeLayoutRouteChildren = {
  homeLayoutIndexRoute: homeLayoutIndexRoute,
}

const homeLayoutRouteWithChildren = homeLayoutRoute._addFileChildren(
  homeLayoutRouteChildren,
)

interface homeRouteChildren {
  homeLayoutRoute: typeof homeLayoutRouteWithChildren
}

const homeRouteChildren: homeRouteChildren = {
  homeLayoutRoute: homeLayoutRouteWithChildren,
}

const homeRouteWithChildren = homeRoute._addFileChildren(homeRouteChildren)

interface productRequestLayoutRouteChildren {
  productRequestLayoutIdRoute: typeof productRequestLayoutIdRoute
}

const productRequestLayoutRouteChildren: productRequestLayoutRouteChildren = {
  productRequestLayoutIdRoute: productRequestLayoutIdRoute,
}

const productRequestLayoutRouteWithChildren =
  productRequestLayoutRoute._addFileChildren(productRequestLayoutRouteChildren)

interface productRequestRouteChildren {
  productRequestLayoutRoute: typeof productRequestLayoutRouteWithChildren
}

const productRequestRouteChildren: productRequestRouteChildren = {
  productRequestLayoutRoute: productRequestLayoutRouteWithChildren,
}

const productRequestRouteWithChildren = productRequestRoute._addFileChildren(
  productRequestRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof homeLayoutIndexRoute
  '/new': typeof NewIndexRoute
  '/roadmap': typeof RoadmapIndexRoute
  '/$id': typeof productRequestLayoutIdRoute
  '/$id/edit': typeof editProductRequestLayoutIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof homeLayoutIndexRoute
  '/new': typeof NewIndexRoute
  '/roadmap': typeof RoadmapIndexRoute
  '/$id': typeof productRequestLayoutIdRoute
  '/$id/edit': typeof editProductRequestLayoutIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(edit-product-request)': typeof editProductRequestRouteWithChildren
  '/(edit-product-request)/_layout': typeof editProductRequestLayoutRouteWithChildren
  '/(home)': typeof homeRouteWithChildren
  '/(home)/_layout': typeof homeLayoutRouteWithChildren
  '/(product-request)': typeof productRequestRouteWithChildren
  '/(product-request)/_layout': typeof productRequestLayoutRouteWithChildren
  '/new/': typeof NewIndexRoute
  '/roadmap/': typeof RoadmapIndexRoute
  '/(product-request)/_layout/$id': typeof productRequestLayoutIdRoute
  '/(home)/_layout/': typeof homeLayoutIndexRoute
  '/(edit-product-request)/_layout/$id/edit': typeof editProductRequestLayoutIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/new' | '/roadmap' | '/$id' | '/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/new' | '/roadmap' | '/$id' | '/$id/edit'
  id:
    | '__root__'
    | '/(edit-product-request)'
    | '/(edit-product-request)/_layout'
    | '/(home)'
    | '/(home)/_layout'
    | '/(product-request)'
    | '/(product-request)/_layout'
    | '/new/'
    | '/roadmap/'
    | '/(product-request)/_layout/$id'
    | '/(home)/_layout/'
    | '/(edit-product-request)/_layout/$id/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  editProductRequestRoute: typeof editProductRequestRouteWithChildren
  homeRoute: typeof homeRouteWithChildren
  productRequestRoute: typeof productRequestRouteWithChildren
  NewIndexRoute: typeof NewIndexRoute
  RoadmapIndexRoute: typeof RoadmapIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  editProductRequestRoute: editProductRequestRouteWithChildren,
  homeRoute: homeRouteWithChildren,
  productRequestRoute: productRequestRouteWithChildren,
  NewIndexRoute: NewIndexRoute,
  RoadmapIndexRoute: RoadmapIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(edit-product-request)",
        "/(home)",
        "/(product-request)",
        "/new/",
        "/roadmap/"
      ]
    },
    "/(edit-product-request)": {
      "filePath": "(edit-product-request)",
      "children": [
        "/(edit-product-request)/_layout"
      ]
    },
    "/(edit-product-request)/_layout": {
      "filePath": "(edit-product-request)/_layout.tsx",
      "parent": "/(edit-product-request)",
      "children": [
        "/(edit-product-request)/_layout/$id/edit"
      ]
    },
    "/(home)": {
      "filePath": "(home)",
      "children": [
        "/(home)/_layout"
      ]
    },
    "/(home)/_layout": {
      "filePath": "(home)/_layout.tsx",
      "parent": "/(home)",
      "children": [
        "/(home)/_layout/"
      ]
    },
    "/(product-request)": {
      "filePath": "(product-request)",
      "children": [
        "/(product-request)/_layout"
      ]
    },
    "/(product-request)/_layout": {
      "filePath": "(product-request)/_layout.tsx",
      "parent": "/(product-request)",
      "children": [
        "/(product-request)/_layout/$id"
      ]
    },
    "/new/": {
      "filePath": "new/index.tsx"
    },
    "/roadmap/": {
      "filePath": "roadmap/index.tsx"
    },
    "/(product-request)/_layout/$id": {
      "filePath": "(product-request)/_layout.$id.tsx",
      "parent": "/(product-request)/_layout"
    },
    "/(home)/_layout/": {
      "filePath": "(home)/_layout.index.tsx",
      "parent": "/(home)/_layout"
    },
    "/(edit-product-request)/_layout/$id/edit": {
      "filePath": "(edit-product-request)/_layout.$id.edit.tsx",
      "parent": "/(edit-product-request)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
